S: program stat { }
  |
;
stat: int_exp T_SC  { }
    | decl 
;
decl : INT T_ID T_DODJELE int_exp T_SC { }
     
;

int_exp : int_exp T_PLUS int_exp {}
        | int_exp T_MINUS int_exp {}
        | int_exp T_MNOZENJE int_exp {}
        | int_exp T_DIJELJENJE int_exp {}
        | T_LIJEVAZ int_exp T_DESNAZ {}
        | int_exp T_MOD int_exp {}
        |logicka_naredba
        | int_exp T_NEJEDNAKOSTI int_exp {} //treba promijeniti kad budemo ubacivali akcije
        | T_INT  {}
        | T_ID {}
logicka_naredba:| int_exp T_VECE int_exp {}
        | int_exp T_VECE_JEDNAKO int_exp {}
        | int_exp T_MANJE int_exp {}
        | int_exp T_MANJE_JEDNAKO int_exp {}
        | int_exp T_JEDNAKOSTI int_exp {}


| double_exp T_SC {}
| string_exp T_SC {}

INT_EXP ne mora da ima tip

type <int val> int_exp
type <bool> int_logicko
INT_EXP->int_exp | int_logicko




exp:
    T_INT { $$ = $1; printf("Int: %d\n", $1); }
    | T_DOUBLE { $$ = $1; printf("Double: %f\n", $1); }
    | T_STRING { $$ = $1; printf("String: %s\n", $1); }
    | exp T_PLUS exp { $$ = $1 + $3; printf("Exp: %d + %d\n", $1, $3); }
    | exp T_MINUS exp { $$ = $1 - $3; printf("Exp: %d - %d\n", $1, $3); }
    | exp T_MNOZENJE exp { $$ = $1 * $3; printf("Exp: %d * %d\n", $1, $3); }
    | exp T_DIJELJENJE exp { $$ = $1 / $3; printf("Exp: %d / %d\n", $1, $3); }
    | T_LIJEVAZ exp T_DESNAZ { $$ = $2; printf("Exp: ( %d )\n", $2); }
    | exp T_MOD exp { $$ = $1 % $3; printf("Exp: %d %% %d\n", $1, $3); }
    | exp T_VECE exp { $$ = $1 > $3; printf("Exp: %d > %d\n", $1, $3); }
    | exp T_VECE_JEDNAKO exp { $$ = $1 >= $3; printf("Exp: %d >= %d\n", $1, $3); }
    | exp T_MANJE exp { $$ = $1 < $3; printf("Exp: %d < %d\n", $1, $3); }
    | exp T_MANJE_JEDNAKO exp { $$ = $1 <= $3; printf("Exp: %d <= %d\n", $1, $3); }
    | exp T_JEDNAKOSTI exp { $$ = $1 == $3; printf("Exp: %d == %d\n", $1, $3); }
    | exp T_NEJEDNAKOSTI exp { $$ = $1 != $3; printf("Exp: %d != %d\n", $1, $3); }
;


exp:
    int_exp
    | double_exp
    | string_exp
;

int_exp:
    T_INT { $$ = $1; printf("Int: %d\n", $1); }
    | int_exp T_PLUS int_exp { $$ = $1 + $3; printf("Int exp: %d + %d\n", $1, $3); }
    | int_exp T_MINUS int_exp { $$ = $1 - $3; printf("Int exp: %d - %d\n", $1, $3); }
    | int_exp T_MNOZENJE int_exp { $$ = $1 * $3; printf("Int exp: %d * %d\n", $1, $3); }
    | int_exp T_DIJELJENJE int_exp { $$ = $1 / $3; printf("Int exp: %d / %d\n", $1, $3); }
    | int_exp T_MOD int_exp { $$ = $1 % $3; printf("Int exp: %d %% %d\n", $1, $3); }
    | int_exp T_VECE int_exp { $$ = $1 > $3; printf("Int exp: %d > %d\n", $1, $3); }
    | int_exp T_VECE_JEDNAKO int_exp { $$ = $1 >= $3; printf("Int exp: %d >= %d\n", $1, $3); }
    | int_exp T_MANJE int_exp { $$ = $1 < $3; printf("Int exp: %d < %d\n", $1, $3); }
    | int_exp T_MANJE_JEDNAKO int_exp { $$ = $1 <= $3; printf("Int exp: %d <= %d\n", $1, $3); }
    | int_exp T_JEDNAKOSTI int_exp { $$ = $1 == $3; printf("Int exp: %d == %d\n", $1, $3); }
    | int_exp T_NEJEDNAKOSTI int_exp { $$ = $1 != $3; printf("Int exp: %d != %d\n", $1, $3); }
;

double_exp:
    T_DOUBLE { $$ = $1; printf("Double: %f\n", $1); }
    | double_exp T_PLUS double_exp { $$ = $1 + $3; printf("Double exp: %f + %f\n", $1, $3); }
    | double_exp T_MINUS double_exp { $$ = $1 - $3; printf("Double exp: %f - %f\n", $1, $3); }
    | double_exp T_MNOZENJE double_exp { $$ = $1 * $3; printf("Double exp: %f * %f\n", $1, $3); }
    | double_exp T_DIJELJENJE double_exp { $$ = $1 / $3; printf("Double exp: %f / %f\n", $1, $3); }
    | double_exp T_VECE double_exp { $$ = $1 > $3; printf("Double exp: %f > %f\n", $1, $3); }
    | double_exp T_VECE_JEDNAKO double_exp { $$ = $1 >= $3; printf("Double exp: %f >= %f\n", $1, $3); }
    | double_exp T_MANJE double_exp { $$ = $1 < $3; printf("Double exp: %f < %f\n", $1, $3); }
    | double_exp T_MANJE_JEDNAKO double_exp { $$ = $1 <= $3; printf("Double exp: %f <= %f\n", $1, $3); }
    | double_exp T_JEDNAKOSTI double_exp { $$ = $1 == $3; printf("Double exp: %f == %f\n", $1, $3); }
    | double_exp T_NEJEDNAKOSTI double_exp { $$ = $1 != $3; printf("Double exp: %f != %f\n", $1, $3); }
;

string_exp:
    T_STRING { $$ = $1; printf("String: %s\n", $1); }
;





typedef enum { TYPE_INT, TYPE_DOUBLE, TYPE_STRING } VarType;

typedef struct {
    char* name;
    VarType type;
} Symbol;

Symbol symbolTable[100]; // Primer veličine tablice simbola
int symbolCount = 0;

VarType getVariableType(const char* name) {
    for (int i = 0; i < symbolCount; ++i) {
        if (strcmp(symbolTable[i].name, name) == 0) {
            return symbolTable[i].type;
        }
    }
    yyerror("Variable not declared");
    exit(1);
}

void addVariable(const char* name, VarType type) {
    symbolTable[symbolCount].name = strdup(name);
    symbolTable[symbolCount].type = type;
    symbolCount++;
}

